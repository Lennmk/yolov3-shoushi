# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time
import tensorflow as tf
from PyQt5 import QtCore, QtWidgets

from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import sys
import cv2
from models import (
    YoloV3, YoloV3Tiny
)
from dataset import transform_images
from utils import draw_outputs


class flags():
    def __init__(self):
        self.classes='./data/threehand.names'
        self.weights='./checkpoints/yolov3_train_11.tf'
        self.tiny=False
        self.size=416
        self.video='0'
        self.output=None
        self.output_format='XVID',
        self.num_classes=3

FLAGS=flags()
class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        self.timer_camera=QtCore.QTimer()   #定义定时器，控制显示视频的帧率
        self.cap=cv2.VideoCapture()   #创建一个视频流
        self.CAM_NUM=0   #设置0以电脑摄像头

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(600, 90, 93, 28))
        self.pushButton.setObjectName("pushButton")



        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(600, 200, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(600, 290, 93, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 600, 500))
        self.label.setAutoFillBackground(True)
        self.label.setStyleSheet("background-color: Black")
        self.label.setText("")
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.slot_init(MainWindow)   #初始化加载slot_init函数
        self.pushButton_2.clicked.connect(lambda event:self.slot_init2(MainWindow))
        #加载gpu加载模型等
        physical_devices = tf.config.experimental.list_physical_devices('GPU')
        for physical_device in physical_devices:
            tf.config.experimental.set_memory_growth(physical_device, True)

        if FLAGS.tiny:
            self.yolo = YoloV3Tiny(classes=FLAGS.num_classes)
        else:
            self.yolo = YoloV3(classes=FLAGS.num_classes)

        self.yolo.load_weights(FLAGS.weights)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "打开摄像头"))
        self.pushButton_2.setText(_translate("MainWindow", "检测"))
        self.pushButton_3.setText(_translate("MainWindow", "退出"))
    def slot_init(self,MainWindow):

        self.pushButton.clicked.connect(self.open_video)  #点击打开摄像头时执行
        self.timer_camera.timeout.connect(self.show_video)  # 若定时器结束，则调用show_camera()
        self.pushButton_3.clicked.connect(MainWindow.close)  # 关闭

    def slot_init2(self,MainWindow):
        self.timer_camera.stop()  # 停止定时器
        self.open_video()
        self.timer_camera.timeout.connect(self.main)
        self.pushButton_3.clicked.connect(MainWindow.close)  # 关闭
    def open_video(self):
        if self.timer_camera.isActive() ==False:  #如果定时器没有开启
            flag=self.cap.open(self.CAM_NUM)   #打开视频
            if flag==False:    #如果打不开
                print('摄像头打开不成功')
            else:
                self.timer_camera.start(30)   #定时器开始每30毫秒记录一帧，结果是每过30ms从摄像头中取一帧显示
                self.pushButton.setText('关闭相机')
        else:
            self.timer_camera.stop()     #停止定时器
            self.cap.release()   #释放缓存
            self.label.clear()   #将label内容情况
            self.pushButton.setText('打开相机')
    def show_video(self):
        flag,self.image=self.cap.read()  #读取一帧
        show=cv2.cvtColor(self.image,cv2.COLOR_BGR2RGB) #转换为rgb格式
        showImage=QImage(show.data,show.shape[1],show.shape[0],QImage.Format_RGB888)  #设置该图片显示的位置格式等
        self.label.setPixmap(QPixmap.fromImage(showImage)) #将图片加载到label

    def main(self):

        class_names = [c.strip() for c in open(FLAGS.classes).readlines()]
        # logging.info('classes loaded')
        f,img=self.cap.read()

        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        img_in = tf.expand_dims(img, 0)
        img_in = transform_images(img_in, FLAGS.size)
        print(type(img_in))

        times=[]
        t1 = time.time()
        boxes, scores, classes, nums = self.yolo.predict(img_in)
        print(nums)
        t2 = time.time()
        times.append(t2 - t1)
        times = times[-20:]
        img = draw_outputs(img, (boxes, scores, classes, nums), class_names)
        img = cv2.putText(img, "Time: {:.2f}ms".format(sum(times) / len(times) * 1000), (0, 30),cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, (0, 0, 255), 2)
        showImage = QImage(img.data, img.shape[1], img.shape[0], QImage.Format_RGB888)  # 设置该图片显示的位置格式等
        self.label.setPixmap(QPixmap.fromImage(showImage))  # 将图片加载到label

if __name__=='__main__':
    app=QApplication(sys.argv)
    window=QMainWindow()
    ui=Ui_MainWindow()
    ui.setupUi(window)
    window.show()
    sys.exit(app.exec())